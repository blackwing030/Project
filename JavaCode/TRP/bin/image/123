package image;
import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import java.util.Random;
import java.util.Arrays;
import java.lang.Object.*;
import java.awt.Color;
import java.awt.image.BufferedImage;
public class MedianFilter{
    
    private int size; //size of the square filter
    
    public MedianFilter(int s) {
        if ((s%2 == 0)||(s < 3))
        {   //check if the filter size is an odd number > = 3
            System.out.println(s+"is not a valid filter size.");
            System.out.println("Filter size is now set to 3");
            s = 3;
        }
        size = s;
    }
    
    public int getFilterSize() {
        return size;
    }
    
    //sort the array, and return the median
    public int median(int[] a) {
        int temp;
        int asize = a.length;
        int midian_count = 10; //weight_midian_filter_count
        int mid_number;
        int i;
        int [] des_array ;
        int number;
        des_array = Arrays.copyOf(a, a.length); //copy array
//        mid_number = a[asize/2]; //find midnumber
//        i = asize;
//        for(i = asize+1;i < (asize + 5) ;i++){       	
 //       	des_array[i] = mid_number;
 //       }
        
       
        //sort the array in increasing order
        for (i = 0; i < (asize) ; i++){
            for (int j = i+1; j < asize; j++){
                if (des_array[i] > des_array[j]) {
                    temp = a[i];
                    des_array[i] = des_array[j];
                    des_array[j] = temp;
                }
        	}
        }
        //if  odd
        if (asize%2 == 1){
        	number = des_array[asize/2];
            return number;
        }
//        else
//            return ((des_array[asize/2]+des_array[asize/2 - 1])/2);
    }
    
    public int[] getArray(BufferedImage image, int x, int y){
        int[] n; //store the pixel values of position(x, y) and its neighbors
        int h = image.getHeight();
        int w = image.getWidth();
        int xmin, xmax, ymin, ymax; //the limits of the part of the image on which the filter operate on
        xmin = x - size/2;
        xmax = x + size/2;
        ymin = y - size/2;
        ymax = y + size/2;
        
        //special edge cases
        if (xmin < 0)
            xmin = 0;
        if (xmax > (w - 1))
            xmax = w - 1;
        if (ymin < 0)
            ymin = 0;
        if (ymax > (h - 1))
            ymax = h - 1;
        //the actual number of pixels to be considered
        int nsize = (xmax-xmin+1)*(ymax-ymin+1);
        n = new int[nsize];
        int k = 0;
        for (int i = xmin; i <= xmax; i++)
            for (int j = ymin; j <= ymax; j++){
                n[k] = image.getRGB(i, j); //get pixel value
                k++;
            }
        return n;
    }
    
    public void filter(BufferedImage srcImage, BufferedImage dstImage) {
        int height = srcImage.getHeight();
        int width = srcImage.getWidth();
        
        int[] a; //the array that gets the pixel value at (x, y) and its neightbors
        
        for (int k = 0; k < width; k++){
            for (int j = 0; j < height; j++) {
                a = getArray(srcImage, j, k); //from sourceimg to get filter array 
                int[] red, green, blue;
                red = new int[a.length];
                green = new int[a.length];
                blue = new int[a.length];
                //get the red,green,blue value from the pixel
                for (int i = 0; i < a.length; i++) {
                    red[i] = (a[i]& 0xff0000)>> 16;
                    green[i] = (a[i] & 0xff00) >> 8;
                    blue[i] = a[i] & 0xff;
                }
                //find the median for each color
//                int R = median(red);
 //               int G = median(green);
 //               int B = median(blue);
//        		Color rgb = new Color(R, G, B); // Color 
 //       		int spixel = rgb.getRGB();	                              
                //set the new pixel value using the median just found
 //               dstImage.setRGB(k, j, spixel);
            }
        }
    }
 
    
}